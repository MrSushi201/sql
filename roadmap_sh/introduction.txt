SQL Introduction
SQL - Structured Query Language is used to communicate with and manage databases. 
It is used for manipulating data held in RDBMS and RDSMS.
RDBMS - Relational Database Management System.
RDSMS - Relational Data Stream Management System.

SQL consists of several components:
* Queries - Allow you retrieve data from a database. 
* DDL - Data Definition Language is used to:
    Create, alter, or delete databases and their relatied objects. 
    Commands include CREATE, ALTER, DROP, and TRUNCATE.
* DML - Data Manipulation Language is used to:
    Manage data within database objects. 
    Commands include SELECT, INSERT, UPDATE, and DELETE.
* DCL - Data Control Language is used to:
    Deal with rights, permissions, and other control-level management tasks for the database system. 
    Commands include GRANT and REVOKE.
--------------------

What are Relational Databases?
Relational databases are a type of database management system (DBMS) that organize and store data in tables with rows and columns.

Below are key concepts associated with relational databases:
* Tables - Data is organized into tables, also known as relations or entities. 
    Each table consists of rows and columns. Each row represents a record, and each column represents an attribute or field. 
* Rows - Each row in a table is a record or tuple, and it contains a unique identifer called a primary key. The primary key ensures that each row can be uniquely identified. 
* Columns - Each column in a table represents a specific attribute or field of the data. 
* Keys - Keys are used to establish relationships between tables. They are are two types of keys, and these are:
    Primary key - The primary key uniquely identifies each record in a table.
    Foerign key - The foreign key in one table can reference the primary key in another table, creating a link between them. 
* Relationships - Relationships define how tables are connected to each other. Common types of relationships are:
    One-to-One - One record in one table is associated with one and only one record in another table.
    One-to-Many - One record in one table can be associated with one or more records in another table. 
    Many-to-Many - Multiple records in one table are associated with multiple records in another table. 
* Normalization - A process used to organize data in a way that reduces redundancy and dependency. It involves breaking down large tables into smaller ones and creating relationships between them.
* SQL - A standard programming language used for managing and manipulating relational databases. 
* ACID properties - Relational databases adhere to the ACID properties (Atomicity, Consistency, Isolation, Durability), ensuring that database transactions are reliable and maintain data integrity. 

* ACID properties in more details:
    Atomicity - Ensures that a transaction is treated as a single, indivisible unit of work. 
    Either all changes made within a transaction are commited to the database, or none of them are.
    Example: Consider a bank transfer between two accounts where the money is withdrawn from one and deposited into another.
             Atomicity ensures that either both the withdrawal and deposit operations succeed, or neither of them takes place. 
             If one operation fails, the entire transaction is rolled back to its original state. 
    
    Consistency - Ensures that a transaction brings the database from one valid state to another.
    The database must satisfy certain integrity constraints before and after the transaction. 
    
    Isolation - Ensures that the concurrent execution of transaction does not result in interference or conflicts. 
    Each transaction appears to be executed in isolation, without being affected by other concurrently executing transactions.
    Example: Imagine two users simultaneously updating the same bank account.
             Isolation ensures that each user sees the database as if they were the only ones accessing it. 
             This prevents situations where one user's transaction intergeres with another's. 

    Durability - Ensures that once a transaction is committed, its effects are permanent and survive any subsequent failures. 
    Even in the event of a system crash, the changes made by commited transactions are preserved. 
    Example: If a user receives a confirmation message after completing an online purchase, durability ensures that the record of that purchase is not lost.
             Even if the system crashes immediately after the confirmation.
--------------------

RDBMS Benefits and Limitations
+ Structured data - RDBMS allows data storage in a structured way, using rows and columns in tables. 
  This makes it easy to manipulate the data using SQL, ensuring efficient and flexible usage. 
+ ACID properties - Atomicity, Consistency, Isolation, and Durability ensure reliable and safe data manipulation in a RDBMS.
+ Normalization - RDBMS supports data normalization, a process that organize data in a way that reduces data redundancy and improves data integrity. 
+ Scalability - RDBMSs generally provide good scalability options, allowing for the addition of more storage or computational resources as the data and workload grow.
+ Data Integrity - RDBMS provides mechanisms like constraints, primary keys, and foreign keys to enforce data integrity and consistency, ensuring that the data is accurate and reliable. 
+ Security - RDBMSs offer various security features such as user authentication, access control, and data encryption to protect sensitive data. 
- Complexity - Setting up and managing an RDBMS can be complex, especially for large applications. It requires technical knowledge and skills to manage, tune, and optimize the database. 
- Cost - RDBMSs can be expensive, both in terms of licensing fees and the computational and storage resources they require. 
- Fixed Schemas - RDBMS follows a rigid chema for data organization, which means any changes to the schema can be time-consuming, and complicated. 
- Handling of Unstructured Data - RDBMSs are not suitable for handling unstructured data like multimedia files, social media posts, and sensor data, as their relational structure is optimized for structured data. 
- Horizontal Scalability - RDBMSs are not as easily horizontally scalable as NoSQL databases. Scaling horizontally, which involves adding more machines to the system, can be challenging in terms of cost and complexity. 
--------------------

SQL vs. NoSQL Databases
SQL Databases:
SQL databases are also known as relational databases. They have predefined schema, and data is stored in tables consisting of rows and columns. 
SQL databases follow the ACID properties to ensure reliable transactions. 
Some popular SQL databases include MySQL, PostgreSQL, and Microsoft SQL Server. 
Advantages and Limitations of SQL databases:
+ Predefined schema - Ideal for applications with fixed structure. 
+ ACID transactions - Ensures data consistency and reliabilty.
+ Support for complex queries - Rich SQL queries can handle complex data relationships and aggregation operations.
+ Scalability - Vertical scaling by adding more resources to the server.
- Rigid schema - Data structure updates are time-consuming and can lead to downtime.
- Scaling - Difficulties in horizontal scaling and sharding of data across multiple servers.
- Not well-suited for hierarchical data - Requires multiple tables and JOINs to model tree-like structures. 

NoSQL Databases:
NoSQL (Not only SQL) databases refer to non-relational databases, which do not follow a fixed schema for data storage.
Instead, they use a flexible and semi-structured format like JSON documents, key-value pairs, or graphs. 
MongoDB, Cassandra, Redis, and Couchbase are some popular NoSQL databases. 
Advantages/Limitations of NoSQL databases:
+ Flexible schema - Easily adapts to changes without disrupting the application.
+ Scalability - Horizontal scaling by partitioning data across multiple servers (sharding).
+ Fast - Designed for faster read and writes, often with a simpler query language.
+ Handling large volumes of data - Better suited to managing big data and real-time applications.
+ Support for various data structures - Different NoSQL databases cater to various needs, like document, graph, or key-value stores. 
- Limited query capabilities - Some NoSQL databases lack complex query and aggregation support or use specific query languages.
- Weaker consistency - Many NoSQL databases follow the BASE (Basically Available, Soft state, Eventual consistency) properties that provide weaker consistency guarantees than ACID-compliant databases. 

MongoDB - A NoSQL Database
This guide focuses on MongoDB, a popular NoSQL database that uses a document-based data model. 
MongoDB has been designed with flexibility, performance, and scalability in mind. 
With its JSON-like data format (BSON) and powerful querying capabilities, MongoDB is an excellent choice for modern applications dealing with diverse and large-scale data. 